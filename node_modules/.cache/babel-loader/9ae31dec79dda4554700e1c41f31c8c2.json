{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/git/react-chat-app/src/components/SendMessage.js\",\n    _s = $RefreshSig$();\n\n// Import the functions from the SDKs\nimport React, { useState } from 'react';\nimport { db, auth } from '../firebase/firebase';\nimport firebase from 'firebase/compat/app';\nimport { getStorage, ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\nimport { Input, Button } from '@mui/material/';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SendMessage = ({\n  scroll\n}) => {\n  _s();\n\n  const [input, setInput] = useState(\"\");\n  const [showEmojis, setShowEmojis] = useState(false);\n  const storage = getStorage(); // Add emojis function\n\n  const addEmoji = e => {\n    let sym = e.unified.split(\"-\");\n    let codesArray = [];\n    sym.forEach(el => codesArray.push(\"0x\" + el));\n    let emoji = String.fromCodePoint(...codesArray);\n    setInput(input + emoji);\n  }; // form on submit send message function \n\n\n  const sendMessage = e => {\n    // if(input.trim().length === 0) {\n    //     return;\n    // }\n    e.preventDefault();\n    const {\n      uid,\n      photoURL\n    } = auth.currentUser;\n\n    const uploadFiles = file => {\n      const storageRef = ref(storage, file.name);\n      const uploadTask = uploadBytesResumable(storageRef, file); // Register three observers:\n      // 1. 'state_changed' observer, called any time the state changes\n      // 2. Error observer, called on failure\n      // 3. Completion observer, called on successful completion\n\n      uploadTask.on('state_changed', snapshot => {// Observe state change events such as progress, pause, and resume\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        // const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        // console.log('Upload is ' + progress + '% done');\n        // switch (snapshot.state) {\n        // case 'paused':\n        //     console.log('Upload is paused');\n        //     break;\n        // case 'running':\n        //     console.log('Upload is running');\n        //     break;\n        // }\n      }, error => {// Handle unsuccessful uploads\n      }, () => {\n        // Handle successful uploads on complete\n        // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n        getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n          db.collection('messages').add({\n            photoURL,\n            downloadURL,\n            uid,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp()\n          });\n          setInput('');\n          scroll.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        });\n      });\n    };\n\n    const file = e.target[0].files[0];\n\n    if (file) {\n      uploadFiles(file);\n    } //add the form details to the database\n\n\n    if (input.trim().length !== 0) {\n      db.collection('messages').add({\n        text: input,\n        photoURL,\n        uid,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp()\n      });\n      setInput('');\n      scroll.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sendMsg\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          onClick: () => setShowEmojis(!showEmojis),\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            className: \"icon\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              \"stroke-linecap\": \"round\",\n              \"stroke-linejoin\": \"round\",\n              \"stroke-width\": \"2\",\n              d: \"M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          style: {\n            width: '78%',\n            fontSize: '15px',\n            fontWeight: '550',\n            marginLeft: '5px',\n            marginBottom: '-3px'\n          },\n          placeholder: \"Message...\",\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            width: '18%',\n            fontSize: '15px',\n            fontWeight: '550',\n            margin: '4px 5% -13px 5%',\n            maxWidth: '200px'\n          },\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), showEmojis && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Picker, {\n            onSelect: addEmoji\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SendMessage, \"k1I8On0XgZqXP0izogpq9V/qKtM=\");\n\n_c = SendMessage;\nexport default SendMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SendMessage\");","map":{"version":3,"sources":["/Applications/MAMP/htdocs/git/react-chat-app/src/components/SendMessage.js"],"names":["React","useState","db","auth","firebase","getStorage","ref","getDownloadURL","uploadBytesResumable","Input","Button","Picker","SendMessage","scroll","input","setInput","showEmojis","setShowEmojis","storage","addEmoji","e","sym","unified","split","codesArray","forEach","el","push","emoji","String","fromCodePoint","sendMessage","preventDefault","uid","photoURL","currentUser","uploadFiles","file","storageRef","name","uploadTask","on","snapshot","error","then","downloadURL","collection","add","createdAt","firestore","FieldValue","serverTimestamp","current","scrollIntoView","behavior","target","files","trim","length","text","width","fontSize","fontWeight","marginLeft","marginBottom","value","margin","maxWidth"],"mappings":"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","sourcesContent":["// Import the functions from the SDKs\n\nimport React, { useState } from 'react'\nimport { db, auth } from '../firebase/firebase';\nimport firebase from 'firebase/compat/app';\n\nimport { getStorage, ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\n\nimport { Input, Button } from '@mui/material/'\n\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\n\nconst SendMessage = ({ scroll }) => {\n\n    const [input, setInput] = useState(\"\");\n    const [showEmojis, setShowEmojis] = useState(false);\n\n    const storage = getStorage();\n\n    // Add emojis function\n\n    const addEmoji = (e) => {\n        let sym = e.unified.split(\"-\");\n        let codesArray = [];\n        sym.forEach((el) => codesArray.push(\"0x\" + el));\n        let emoji = String.fromCodePoint(...codesArray);\n        setInput(input + emoji);\n    };\n\n     // form on submit send message function \n\n    const sendMessage = (e) => {\n        \n        \n\n        // if(input.trim().length === 0) {\n        //     return;\n        // }\n\n        e.preventDefault()\n        const { uid, photoURL } = auth.currentUser\n\n        const uploadFiles = (file) => {\n            const storageRef = ref(storage, file.name);\n\n            const uploadTask = uploadBytesResumable(storageRef, file);\n\n            // Register three observers:\n            // 1. 'state_changed' observer, called any time the state changes\n            // 2. Error observer, called on failure\n            // 3. Completion observer, called on successful completion\n            uploadTask.on('state_changed', \n            (snapshot) => {\n                // Observe state change events such as progress, pause, and resume\n                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                // const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                // console.log('Upload is ' + progress + '% done');\n                // switch (snapshot.state) {\n                // case 'paused':\n                //     console.log('Upload is paused');\n                //     break;\n                // case 'running':\n                //     console.log('Upload is running');\n                //     break;\n                // }\n            }, \n            (error) => {\n                // Handle unsuccessful uploads\n            }, \n            () => {\n                // Handle successful uploads on complete\n                // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n                getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n\n                    db.collection('messages').add({\n                        photoURL,\n                        downloadURL,\n                        uid,\n                        createdAt: firebase.firestore.FieldValue.serverTimestamp()\n                    })\n                    setInput('')\n                    scroll.current.scrollIntoView({ behavior: 'smooth' })\n                });\n            }\n            );\n        };\n        \n        \n\n        const file = e.target[0].files[0];\n        if(file) {\n            uploadFiles(file);\n        }\n\n        //add the form details to the database\n        if(input.trim().length !== 0) {\n            db.collection('messages').add({\n                text: input,\n                photoURL,\n                uid,\n                createdAt: firebase.firestore.FieldValue.serverTimestamp()\n            })\n            setInput('')\n            scroll.current.scrollIntoView({ behavior: 'smooth' })\n        }\n    };\n\n    \n    \n    \n    \n    return (\n        <div>\n            <form onSubmit={sendMessage}>\n                <div className=\"sendMsg\">\n  \n            <input type=\"file\" />\n\n\n                    <Button className=\"button\" onClick={() => setShowEmojis(!showEmojis)}>\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            className=\"icon\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                            >\n                            <path\n                                stroke-linecap=\"round\"\n                                stroke-linejoin=\"round\"\n                                stroke-width=\"2\"\n                                d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                            />\n                        </svg>\n                    </Button>\n                    \n                    <Input style={{ width: '78%', fontSize: '15px', fontWeight: '550', marginLeft: '5px', marginBottom: '-3px' }} placeholder='Message...' type=\"text\" \n                        value={input} onChange={(e) => setInput(e.target.value)}\n                    />\n                    \n                    <Button style={{ width: '18%', fontSize: '15px', fontWeight: '550', margin: '4px 5% -13px 5%', maxWidth: '200px'}} type=\"submit\">Send</Button>\n                    {showEmojis && (\n                        <div>\n                        <Picker onSelect={addEmoji} />\n                        </div>\n                    )}\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default SendMessage"]},"metadata":{},"sourceType":"module"}